<?php

/**
 * This is the model class for table "mw_contact_us".
 *
 * The followings are the available columns in table 'mw_contact_us':
 * @property integer $id
 * @property integer $type
 * @property string $email
 * @property string $name
 * @property string $meassage
 * @property string $city
 * @property string $date
 */
class ContactAgent  extends ContactUs
{
	 public $image;
    /**
     * @return array validation rules for model attributes.
     */
    public function rules()
    {
        // NOTE: you should only define rules for those attributes that
        // will receive user inputs.
        return array(
            array('name, email,  meassage,phone,user_id,considering', 'required',   'message'=>$this->mTag()->getTag('required','Required')),
            array('type,phone', 'numerical', 'integerOnly'=>true),
            array('email, name', 'length', 'max'=>150),
            array('city', 'length', 'max'=>250),
            array('phone', 'length', 'min'=>10),
            array('phone', 'length', 'max'=>14),
            array('email', 'email','message'=>$this->mTag()->getTag('enter_a_valid_email_address.','Enter a valid email address.')),
            array('contact_type,w_talk', 'safe'),
               array('ip_address', 'safe'),
           // array('verifyCode', 'CaptchaExtendedValidator', 'allowEmpty'=>!CCaptcha::checkRequirements(), 'captchaAction' => 'site/captcha'),
           // array('verifyCode', 'safe'),
            // The following rule is used by search().
            // @todo Please remove those attributes that should not be searched.
            array('id, type, email, name, meassage, city, date', 'safe', 'on'=>'search'),
             array('image', 'file', 'types'=>'pdf,doc,docx', 'allowEmpty'=>true,  'safe' => true),
        );
    }
 
    public function attributeLabels()
    {
        return array(
            'id' => 'ID',
            'ad_id' => 'AD',
            'type' => 'Position',
            'email' =>  $this->mTag()->gettag('email','Email'),
            'name' => $this->mTag()->gettag('full_name','Full Name'), 
            'phone' => $this->mTag()->gettag('phone','Phone'), 
             'user_id' => $this->mTag()->getTag('user','User'),
            'meassage' => $this->mTag()->gettag('message','Message') ,
            'city' => 'City',
            'date' => 'Date',
            'w_talk' => 'Date',
            'considering' => $this->mTag()->gettag('i_am_considering','I am Considering'),
        );
    }
    public function relations()
    {
        // NOTE: you may need to adjust the relation name and the related
        // class name for the relations automatically generated below.
        return array(
        'ad' => array(self::BELONGS_TO, 'PlaceAnAd', 'ad_id'),
        'agent' => array(self::BELONGS_TO, 'Agents', 'user_id'),
        );
    }

    /**
     * Retrieves a list of models based on the current search/filter conditions.
     *
     * Typical usecase:
     * - Initialize the model fields with values from filter form.
     * - Execute this method to get CActiveDataProvider instance which will filter
     * models according to data in model fields.
     * - Pass data provider to CGridView, CListView or any similar widget.
     *
     * @return CActiveDataProvider the data provider that can return the models
     * based on the search/filter conditions.
     */
      public $user_type;
     public $user_slug;
     public $first_name;
     public $company_name;
     public $cords;
     
    public function search($return= false)
    {
        // @todo Please modify the following code to remove attributes that should not be searched.

        $criteria=new CDbCriteria;
          $criteria->condition = '1';
        $criteria->select = 't.*,usr.company_name,usr.user_type,usr.slug as user_slug,usr.first_name';
     
        $criteria->compare('id',$this->id);
        $criteria->compare('t.user_id',$this->user_id);
        $criteria->compare('type',$this->type);
        $criteria->compare('email',$this->email,true);
        $criteria->compare('name',$this->name,true);
        $criteria->compare('meassage',$this->meassage,true);
        $criteria->compare('city',$this->city,true);
        $criteria->compare('date',$this->date,true);
        $criteria->compare('contact_type','C_AGENT');
            $criteria->join .= ' LEFT JOIN {{listing_users}} usr on usr.user_id = t.user_id ';
   
         $criteria->order="id desc";
         if($return){ return  $criteria; }
         
	 	return new CActiveDataProvider($this, array(
		'criteria'=>$criteria,
		   'pagination'    => array(
                'pageSize'  => $this->paginationOptions->getPageSize(),
                'pageVar'   => 'page',
            ),
		));
    }
     public function getIp(){
   		$client  = @$_SERVER['HTTP_CLIENT_IP'];

		$forward = @$_SERVER['HTTP_X_FORWARDED_FOR'];

		$remote  = @$_SERVER['REMOTE_ADDR'];

		$result  = array('country'=>'', 'city'=>'');

		if(filter_var($client, FILTER_VALIDATE_IP)){

		$ip = $client;

		}elseif(filter_var($forward, FILTER_VALIDATE_IP)){

		$ip = $forward;

		}else{

		$ip = $remote;

		}
		return $ip;
   }
    public function beforeSave(){
		
	   if(parent::beforeSave()) 
	   {
			 $this->contact_type= 'C_AGENT';
            if($this->isNewRecord){
            $this->ip_address      =  $this->getIp();
            }

			 return true;
	   }
	return false;
	 
	}
	public function findEnquiry($formData=array(),$count_future=false ,$returnCriteria =false){
		  
		$criteria=new CDbCriteria;
		$criteria->condition = '1';
		$criteria->select = 't.*,usr.company_name,usr.user_type,usr.slug as user_slug,usr.first_name';
		$criteria->compare('contact_type','C_AGENT');
		$criteria->compare('usr.user_type',$this->user_type);
		$criteria->condition .= ' and  t.user_id IS NOT NULL  ';
		$criteria->join .= ' LEFT JOIN {{listing_users}} usr on usr.user_id = t.user_id ';
     
		$order  = 't.id   desc ';		   
	    $criteria->order  =   $order; 		
		$criteria->limit  = Yii::app()->request->getQuery('limit','10');
		$criteria->offset = Yii::app()->request->getQuery('offset','0');
		if($returnCriteria)	 { return  $criteria; }
		if(!empty($count_future)){
			$Result = self::model()->findAll($criteria);
			$criteria->offset = $criteria->limit+$criteria->offset   ;
			$criteria->select = 't.id'; 
			$criteria->limit = '1'; 
			$future_count = self::model()->find($criteria);
			return array('result'=>$Result,'future_count'=>$future_count );
		}
		else{
			return  self::model()->findAll($criteria)  ; 
		 
		}
	 
	}
    /**
     * Returns the static model of the specified AR class.
     * Please note that you should have this exact method in all your CActiveRecord descendants!
     * @param string $className active record class name.
     * @return ContactUs the static model class
     */
    public static function model($className=__CLASS__)
    {
        return parent::model($className);
    }
    public function afterSave(){
		 
		
		     $options = Yii::app()->options ; 
			 
             
			$emailTemplate =  CustomerEmailTemplate::model()->findByAttributes(array('template_uid'=>"og835j4t8x793"));
			if($emailTemplate) {
			      $subject       = $emailTemplate->subject;
			      $emailTemplate = $emailTemplate->content;
			   
			    }
			else { 	 return true; }
		   
		    $logo =  '<a href=""><img src="'.OptionCommon::logoUrl().'" style="width:70px"  alt=""></a>';
			$emailTemplate = str_replace('{logo}',$logo, $emailTemplate);
			$emailTemplate = str_replace('{name}',$this->name, $emailTemplate);
			$emailTemplate = str_replace('{phone}', $this->phone, $emailTemplate);
			$emailTemplate = str_replace('{email}', $this->email, $emailTemplate);
			$emailTemplate = str_replace('{message}', nl2br($this->meassage), $emailTemplate);
			$emailTemplate = str_replace('{date}', $this->dateAdded, $emailTemplate);
			if(!empty($this->agent)){
				$emailTemplate = str_replace('{url}', '<a href="'.$this->agent->AgentDetailUrl2.'">'.$this->agent->fullName.'</a>', $emailTemplate);
		    }
		    else{
				$emailTemplate = str_replace('{url}','', $emailTemplate);
			}
			$emailTemplate = str_replace('{from}',Yii::app()->options->get('system.common.site_name'), $emailTemplate);
		    $emailTemplate_common = $options->get('system.email_templates.common');
		    $emailTemplate = str_replace('[CONTENT]', $emailTemplate, $emailTemplate_common);
			  
			if(!empty($this->user_id) and  $options->get('system.common.send_enquiry_to_agent','yes')=='yes'){
			   $customer =  $this->agent ; 
			    if($customer->email_verified=='1'){
			     $usersList =   array( $customer->email=> $customer->fullName)  ; 
			    }
			}else{
		      //	 $usersList = array_replace( array(Yii::app()->options->get('system.common.admin_email')=>'Admin')  ); 
			} 
			 
			if(!empty($usersList)){
				foreach($usersList as $k=>$v){
				 
					        $status = 'S';
							$adminEmail = new Email();			 
							$adminEmail->subject = $subject ;
							$adminEmail->message =  Yii::t('trans',$emailTemplate,array('{user}'=>$v)) ;
							$receipeints = serialize(array($k));
							$adminEmail->status = $status;
							$adminEmail->receipeints = $receipeints;
							$adminEmail->sent_on =   1;
							$adminEmail->type =   'REGISTER';
							$adminEmail->sent_on_utc =   new CDbExpression('NOW()');
							$adminEmail->save(false);
							$adminEmail->send;
					
				}
			}
			 
	 return true;
       
     
	}
   public function getIpInfo(){
	    if(!empty($this->ip_address)){ return $this->ip_address;  }
 
	}
   
	 public function getlinkTitle(){
		switch($this->user_type){
			case 'D':
			$r = !empty($this->company_name) ? $this->company_name :  $this->first_name;
			  return $r; 
	
			break;	
			case 'C':
			$r = !empty($this->company_name) ? $this->company_name :  $this->first_name;
  return $r; 	
			break;	
			default:
			$r =  $this->first_name;
  return $r; 	
			break;
		}
		
		
		
	}
	public $last_name;
	public function getlinkUrlText(){
		switch($this->user_type){
			case 'D':
			$r = !empty($this->company_name) ? $this->company_name :  $this->first_name;
			  return $r ;
	
			break;	
			case 'C':
			$r = !empty($this->company_name) ? $this->company_name :  $this->first_name;
			  return $r ;
	
			break;	
			default:
			$r =  $this->first_name .' '.$this->last_name;
			   return $r ;;
	
			break;
		}
		
		
		
	}
	 public function getTypeTitleTitle(){
		 $ar = ListingUsers::model()->getUserType();
		return isset($ar[$this->user_type]) ? $ar[$this->user_type] : ''; 
	}
}
