<?php

/**
 * This is the model class for table "{{user_packages}}".
 *
 * The followings are the available columns in table '{{user_packages}}':
 * @property integer $id
 * @property integer $package_id
 * @property integer $user_id
 * @property string $date_added
 * @property string $amount
 * @property string $latest
 *
 * The followings are the available model relations:
 * @property Package $package
 * @property ListingUsers $user
 */
class UserPackages extends  ActiveRecord
{
    /**
     * @return string the associated database table name
     */
    public function tableName()
    {
        return '{{user_packages}}';
    }

    /**
     * @return array validation rules for model attributes.
     */
    public function rules()
    {
        // NOTE: you should only define rules for those attributes that
        // will receive user inputs.
        return array(
            array('user_id, amount , package_id ', 'required'),
            array('package_id, user_id', 'numerical', 'integerOnly'=>true),
            array('amount', 'length', 'max'=>15),
            array('latest', 'length', 'max'=>1),
            array('ads_allowed,used_ad,validity,created_by', 'safe' ),
            array('category_id', 'length', 'max'=>1),
            // The following rule is used by search().
            // @todo Please remove those attributes that should not be searched.
            array('id, package_id, user_id, date_added, amount, latest,category_id,from_date,to_date,show_all,active_status', 'safe', 'on'=>'search'),
        );
    }
    public $from_date;
    public $to_date;
    public $show_all;public $active_status; 

    /**
     * @return array relational rules.
     */
    public function relations()
    {
        // NOTE: you may need to adjust the relation name and the related
        // class name for the relations automatically generated below.
        return array(
            'package' => array(self::BELONGS_TO, 'Package', 'package_id'),
            'user' => array(self::BELONGS_TO, 'ListingUsers', 'user_id'),
        );
    }
    public $total_used;
	protected function afterSave()
    {
                self::model()->updateAll(array('latest' => '0'), array('condition' => 'id != :cid and user_id = :user_id  and category_id = :category_id ', 'params' => array(':cid' => (int)$this->id , 'user_id' =>(int) $this->user_id , 'category_id' =>(int) $this->category_id  )));
				PricePlanOrder::model()->calculateTotalBalance($this->user_id);
			 
				parent::afterSave();
    }
    public function getValidity_in_days(){
	return 	$this->validity.' days';
	}
    protected function beforeSave()
    {
        
        if (!parent::beforeSave()) {
            return false;
        }
        if($this->isNewRecord and Yii::app()->isAppName('backend')){
			$this->created_by = Yii::app()->user->getId(); 
		}
         
        return true;
    }
    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels()
    {
        return array(
            'id' => 'ID',
            'package_id' => 'Package',
            'user_id' => 'Customer',
            'date_added' => 'Date Added',
            'amount' => 'Amount',
            'latest' => 'Latest',
            'ends_on' => 'Expire On',
            'date_added' => 'Subscribed On',
            'category_id' => 'Category',
        );
    }

    /**
     * Retrieves a list of models based on the current search/filter conditions.
     *
     * Typical usecase:
     * - Initialize the model fields with values from filter form.
     * - Execute this method to get CActiveDataProvider instance which will filter
     * models according to data in model fields.
     * - Pass data provider to CGridView, CListView or any similar widget.
     *
     * @return CActiveDataProvider the data provider that can return the models
     * based on the search/filter conditions.
     */
    public function search()
    {
        // @todo Please modify the following code to remove attributes that should not be searched.

        $criteria=new CDbCriteria;
$criteria->condition = '1';
        $criteria->compare('id',$this->id);
        if ($this->user_id) {
            if (is_string($this->user_id)) {
                $criteria->with['user'] = array(
                    'together' => true,
                    'joinType' => 'INNER JOIN',
                    'condition'=> '(CONCAT(user.first_name, " ", user.last_name) LIKE :c01 OR user.email LIKE :c01  OR user.company_name LIKE :c01)',
                    'params'   => array(':c01' => '%'. $this->user_id .'%')
                );
            } else {
                $criteria->compare('t.user_id', (int)$this->user_id);
            }
        }
        
        if ($this->package_id) {
            if (is_string($this->package_id)) {
				$criteria->condition .= ' and pkg.package_name like :p01';
				$criteria->params[':p01'] =  '%'. $this->package_id .'%';   
            } else {
                $criteria->compare('t.package_id', (int)$this->package_id);
            }
        }
         $criteria->compare('t.category_id',$this->category_id );
        if($this->active_status=='active'){
        	$criteria->compare('t.latest','1');
       if(!empty($this->from_date) and !empty($this->to_date)){
					
					
					$criteria->condition .= '  and DATE(DATE_ADD(t.date_added, INTERVAL t.validity DAY)) >= :from_date   and DATE(DATE_ADD(t.date_added, INTERVAL t.validity DAY)) <= :to_date  ' ;
					$criteria->params[':to_date'] = date('Y-m-d',strtotime($this->to_date));
					$criteria->params[':from_date'] = date('Y-m-d',strtotime($this->from_date));
			 
			
				}
				else if(!empty($this->to_date)){
				$criteria->condition .= ' and DATE(DATE_ADD(t.date_added, INTERVAL t.validity DAY)) >= :to_date  ' ;
				$criteria->params[':to_date'] = date('Y-m-d',strtotime($this->to_date));
				$criteria->condition .= ' and DATE(DATE_ADD(t.date_added, INTERVAL t.validity DAY)) >=  :current  ' ;
				$criteria->params[':current'] = date('Y-m-d');
				}
        }
        if($this->active_status=='expired'){ 	$criteria->compare('t.latest','1');
            	if(!empty($this->from_date) and !empty($this->to_date)){
			 	
					$criteria->condition .= ' and DATE(DATE_ADD(t.date_added, INTERVAL t.validity DAY)) > :from_date  and  DATE(DATE_ADD(t.date_added, INTERVAL t.validity DAY)) < :to_date ' ;
					$criteria->params[':from_date'] = date('Y-m-d',strtotime($this->from_date));
					$criteria->params[':to_date'] = date('Y-m-d',strtotime($this->to_date));
	     }
		 else if(!empty($this->to_date)){
        $criteria->condition .= ' and DATE(DATE_ADD(t.date_added, INTERVAL t.validity DAY)) < :to_date  ' ;
        $criteria->params[':to_date'] = date('Y-m-d',strtotime($this->to_date));
         $criteria->condition .= ' and DATE(DATE_ADD(t.date_added, INTERVAL t.validity DAY)) <  :current  ' ;
		$criteria->params[':current'] = date('Y-m-d');
		}
        }
        
        $criteria->join = 'LEFT JOIN {{package}} pkg on pkg.package_id = t.package_id ';
        
        
        
        $criteria->compare('date_added',$this->date_added,true);
           if(!empty($this->created_by)){ 
                $criteria->select   =   ' t.* ';
            	$criteria->join  .=   ' INNER   JOIN {{user}} gpu on gpu.user_id = t.created_by ';
            	$criteria->condition   .=  ' and gpu.group_id = 8 '; 
            	if(Yii::app()->user->getModel()->removable=='yes'){
                if(Yii::app()->user->getModel()->removable=='no'){
                $order->show_all = 1; 
                }
            	}
        }
        $criteria->compare('amount',$this->amount,true);
        $criteria->compare('latest',$this->latest,true);

        $criteria->order = 't.id DESC';
        
		return new CActiveDataProvider(get_class($this), array(
            'criteria'   => $criteria,
            'pagination' => array(
                'pageSize' => $this->paginationOptions->getPageSize(),
                'pageVar'  => 'page',
            ),
            'sort'=>array(
                'defaultOrder' => array(
                    't.id'  => CSort::SORT_DESC,
                ),
            ),
        ));
    }
 protected function afterDelete()
    {
		 
        if (!empty($this->user_id)) {
           PricePlanOrder::model()->calculateTotalBalance($this->user_id);
        }

        parent::afterDelete();
    }
    /**
     * Returns the static model of the specified AR class.
     * Please note that you should have this exact method in all your CActiveRecord descendants!
     * @param string $className active record class name.
     * @return UserPackages the static model class
     */
    public static function model($className=__CLASS__)
    {
        return parent::model($className);
    }
    public $category_id;
    public function getEndsOn(){
        //$local_toime =  OptionCommon::localtime(date('d/m/y  H:i A'),$outfomat='d/m/y  H:i A');
        //return DateTimeFormatterBehavior::formatLocalizedDateTime(); 
        $startDate = strtotime($this->dateAdded);
        return  date('d-m-Y H:i:s', strtotime('+'.$this->validity.' day', $startDate)) ;
    }
    public function getEndsOnHtml(){
        $expire_on = $this->getEndsOn();
         
        $local_toime =  OptionCommon::localtime(date('Y-m-d H:i:s'),$outfomat='Y-m-d H:i:s');
        if(strtotime($local_toime) > strtotime($expire_on)  ){ $class="bg-red"; }else { $class="bg-green"; }
        return '<small class="label '.$class.'">'.  date('d/m/y h:i A',strtotime($expire_on)) .'</small>' ;
    }
    
    public function activePackageList($user_id,$to_date,$from_date,$category=null,$package_id=null){
				$criteria=new CDbCriteria;
				//  $criteria->select = ' DATE(DATE_ADD(t.date_added, INTERVAL t.validity DAY)) as validity,t.date_added';
				$criteria->compare('t.latest','1');
				if(!empty($user_id)){   $criteria->compare('t.created_by',$user_id ); }
				 else{
         
         	$criteria->join  .=   ' INNER   JOIN {{user}} gpu on gpu.user_id = t.created_by ';
            	$criteria->condition   .=  ' and gpu.group_id = 8 ';
        }
				if(!empty($category)){
					$criteria->join .= ' INNER JOIN {{package}} pkg on t.package_id =  pkg.package_id and pkg.category = :category ' ;
					$criteria->params[':category'] = $category;
				}
				if(!empty($package_id)){
					 $criteria->compare('t.package_id',$package_id );
				}
				
				
				$criteria->condition .= ' and t.created_by is not null ' ;

				if(!empty($from_date) and !empty($to_date)){
					
					
					$criteria->condition .= '  and DATE(DATE_ADD(t.date_added, INTERVAL t.validity DAY)) >= :from_date   and DATE(DATE_ADD(t.date_added, INTERVAL t.validity DAY)) <= :to_date  ' ;
					$criteria->params[':to_date'] = date('Y-m-d',strtotime($to_date));
					$criteria->params[':from_date'] = date('Y-m-d',strtotime($from_date));
			 
			
				}
				else if(!empty($to_date)){
				$criteria->condition .= ' and DATE(DATE_ADD(t.date_added, INTERVAL t.validity DAY)) >= :to_date  ' ;
				$criteria->params[':to_date'] = date('Y-m-d',strtotime($to_date));
				$criteria->condition .= ' and DATE(DATE_ADD(t.date_added, INTERVAL t.validity DAY)) >=  :current  ' ;
				$criteria->params[':current'] = date('Y-m-d');
				}
				
				return  UserPackages::model()->count($criteria);
	}
    public function inactivePackageList($user_id,$to_date,$from_date,$category=null,$package_id=null){
				  $criteria=new CDbCriteria;
        //  $criteria->select = ' DATE(DATE_ADD(t.date_added, INTERVAL t.validity DAY)) as validity,t.date_added';
        $criteria->compare('t.latest','1');
        if(!empty($user_id)){   $criteria->compare('t.created_by',$user_id ); }
         else{
         
         	$criteria->join  .=   ' INNER   JOIN {{user}} gpu on gpu.user_id = t.created_by ';
            	$criteria->condition   .=  ' and gpu.group_id = 8 ';
        }
        $criteria->condition .= ' and t.created_by is not null ' ;
         
       if(!empty($category)){
					$criteria->join .= ' INNER JOIN {{package}} pkg on t.package_id =  pkg.package_id and pkg.category = :category ' ;
					$criteria->params[':category'] = $category;
				}
					if(!empty($package_id)){
					 $criteria->compare('t.package_id',$package_id );
				}
		
		if(!empty($from_date) and !empty($to_date)){
			 	
					$criteria->condition .= ' and DATE(DATE_ADD(t.date_added, INTERVAL t.validity DAY)) > :from_date  and  DATE(DATE_ADD(t.date_added, INTERVAL t.validity DAY)) < :to_date ' ;
					$criteria->params[':from_date'] = date('Y-m-d',strtotime($from_date));
					$criteria->params[':to_date'] = date('Y-m-d',strtotime($to_date));
	     }
		 else if(!empty($to_date)){
        $criteria->condition .= ' and DATE(DATE_ADD(t.date_added, INTERVAL t.validity DAY)) < :to_date  ' ;
        $criteria->params[':to_date'] = date('Y-m-d',strtotime($to_date));
         $criteria->condition .= ' and DATE(DATE_ADD(t.date_added, INTERVAL t.validity DAY)) <  :current  ' ;
		$criteria->params[':current'] = date('Y-m-d');
		}
		  
		  return  UserPackages::model()->count($criteria);
	}
}
